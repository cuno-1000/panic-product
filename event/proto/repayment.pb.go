// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: proto/repayment.proto

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SeedRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SeedRecordRequest) Reset() {
	*x = SeedRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repayment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedRecordRequest) ProtoMessage() {}

func (x *SeedRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repayment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeedRecordRequest.ProtoReflect.Descriptor instead.
func (*SeedRecordRequest) Descriptor() ([]byte, []int) {
	return file_proto_repayment_proto_rawDescGZIP(), []int{0}
}

func (x *SeedRecordRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SeedRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess bool `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
}

func (x *SeedRecordResponse) Reset() {
	*x = SeedRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repayment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedRecordResponse) ProtoMessage() {}

func (x *SeedRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repayment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeedRecordResponse.ProtoReflect.Descriptor instead.
func (*SeedRecordResponse) Descriptor() ([]byte, []int) {
	return file_proto_repayment_proto_rawDescGZIP(), []int{1}
}

func (x *SeedRecordResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type BlacklistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlacklistRequest) Reset() {
	*x = BlacklistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repayment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlacklistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlacklistRequest) ProtoMessage() {}

func (x *BlacklistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repayment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlacklistRequest.ProtoReflect.Descriptor instead.
func (*BlacklistRequest) Descriptor() ([]byte, []int) {
	return file_proto_repayment_proto_rawDescGZIP(), []int{2}
}

type BlacklistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId []uint64 `protobuf:"varint,1,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *BlacklistResponse) Reset() {
	*x = BlacklistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repayment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlacklistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlacklistResponse) ProtoMessage() {}

func (x *BlacklistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repayment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlacklistResponse.ProtoReflect.Descriptor instead.
func (*BlacklistResponse) Descriptor() ([]byte, []int) {
	return file_proto_repayment_proto_rawDescGZIP(), []int{3}
}

func (x *BlacklistResponse) GetUserId() []uint64 {
	if x != nil {
		return x.UserId
	}
	return nil
}

type RepaymentOverDueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeUpperLimit             string `protobuf:"bytes,1,opt,name=time_upper_limit,json=timeUpperLimit,proto3" json:"time_upper_limit,omitempty"`
	AdaptedRemainingRepayments string `protobuf:"bytes,2,opt,name=adapted_remaining_repayments,json=adaptedRemainingRepayments,proto3" json:"adapted_remaining_repayments,omitempty"`
	MaxTimes                   uint32 `protobuf:"varint,3,opt,name=max_times,json=maxTimes,proto3" json:"max_times,omitempty"`
}

func (x *RepaymentOverDueRequest) Reset() {
	*x = RepaymentOverDueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repayment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepaymentOverDueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepaymentOverDueRequest) ProtoMessage() {}

func (x *RepaymentOverDueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repayment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepaymentOverDueRequest.ProtoReflect.Descriptor instead.
func (*RepaymentOverDueRequest) Descriptor() ([]byte, []int) {
	return file_proto_repayment_proto_rawDescGZIP(), []int{4}
}

func (x *RepaymentOverDueRequest) GetTimeUpperLimit() string {
	if x != nil {
		return x.TimeUpperLimit
	}
	return ""
}

func (x *RepaymentOverDueRequest) GetAdaptedRemainingRepayments() string {
	if x != nil {
		return x.AdaptedRemainingRepayments
	}
	return ""
}

func (x *RepaymentOverDueRequest) GetMaxTimes() uint32 {
	if x != nil {
		return x.MaxTimes
	}
	return 0
}

type RepaymentOverDueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId []uint64 `protobuf:"varint,1,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RepaymentOverDueResponse) Reset() {
	*x = RepaymentOverDueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repayment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepaymentOverDueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepaymentOverDueResponse) ProtoMessage() {}

func (x *RepaymentOverDueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repayment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepaymentOverDueResponse.ProtoReflect.Descriptor instead.
func (*RepaymentOverDueResponse) Descriptor() ([]byte, []int) {
	return file_proto_repayment_proto_rawDescGZIP(), []int{5}
}

func (x *RepaymentOverDueResponse) GetUserId() []uint64 {
	if x != nil {
		return x.UserId
	}
	return nil
}

type IsUserIdRepaymentOverDueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeUpperLimit             string `protobuf:"bytes,1,opt,name=time_upper_limit,json=timeUpperLimit,proto3" json:"time_upper_limit,omitempty"`
	AdaptedRemainingRepayments string `protobuf:"bytes,2,opt,name=adapted_remaining_repayments,json=adaptedRemainingRepayments,proto3" json:"adapted_remaining_repayments,omitempty"`
	UserId                     uint64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MaxTimes                   uint32 `protobuf:"varint,4,opt,name=max_times,json=maxTimes,proto3" json:"max_times,omitempty"`
}

func (x *IsUserIdRepaymentOverDueRequest) Reset() {
	*x = IsUserIdRepaymentOverDueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repayment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsUserIdRepaymentOverDueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsUserIdRepaymentOverDueRequest) ProtoMessage() {}

func (x *IsUserIdRepaymentOverDueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repayment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsUserIdRepaymentOverDueRequest.ProtoReflect.Descriptor instead.
func (*IsUserIdRepaymentOverDueRequest) Descriptor() ([]byte, []int) {
	return file_proto_repayment_proto_rawDescGZIP(), []int{6}
}

func (x *IsUserIdRepaymentOverDueRequest) GetTimeUpperLimit() string {
	if x != nil {
		return x.TimeUpperLimit
	}
	return ""
}

func (x *IsUserIdRepaymentOverDueRequest) GetAdaptedRemainingRepayments() string {
	if x != nil {
		return x.AdaptedRemainingRepayments
	}
	return ""
}

func (x *IsUserIdRepaymentOverDueRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *IsUserIdRepaymentOverDueRequest) GetMaxTimes() uint32 {
	if x != nil {
		return x.MaxTimes
	}
	return 0
}

type IsUserIdRepaymentOverDueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverDue bool `protobuf:"varint,1,opt,name=over_due,json=overDue,proto3" json:"over_due,omitempty"`
}

func (x *IsUserIdRepaymentOverDueResponse) Reset() {
	*x = IsUserIdRepaymentOverDueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repayment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsUserIdRepaymentOverDueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsUserIdRepaymentOverDueResponse) ProtoMessage() {}

func (x *IsUserIdRepaymentOverDueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repayment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsUserIdRepaymentOverDueResponse.ProtoReflect.Descriptor instead.
func (*IsUserIdRepaymentOverDueResponse) Descriptor() ([]byte, []int) {
	return file_proto_repayment_proto_rawDescGZIP(), []int{7}
}

func (x *IsUserIdRepaymentOverDueResponse) GetOverDue() bool {
	if x != nil {
		return x.OverDue
	}
	return false
}

type IsInBlacklistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *IsInBlacklistRequest) Reset() {
	*x = IsInBlacklistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repayment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsInBlacklistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsInBlacklistRequest) ProtoMessage() {}

func (x *IsInBlacklistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repayment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsInBlacklistRequest.ProtoReflect.Descriptor instead.
func (*IsInBlacklistRequest) Descriptor() ([]byte, []int) {
	return file_proto_repayment_proto_rawDescGZIP(), []int{8}
}

func (x *IsInBlacklistRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type IsInBlacklistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	In bool `protobuf:"varint,1,opt,name=in,proto3" json:"in,omitempty"`
}

func (x *IsInBlacklistResponse) Reset() {
	*x = IsInBlacklistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repayment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsInBlacklistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsInBlacklistResponse) ProtoMessage() {}

func (x *IsInBlacklistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repayment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsInBlacklistResponse.ProtoReflect.Descriptor instead.
func (*IsInBlacklistResponse) Descriptor() ([]byte, []int) {
	return file_proto_repayment_proto_rawDescGZIP(), []int{9}
}

func (x *IsInBlacklistResponse) GetIn() bool {
	if x != nil {
		return x.In
	}
	return false
}

var File_proto_repayment_proto protoreflect.FileDescriptor

var file_proto_repayment_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x33, 0x0a, 0x12, 0x53, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x11, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a,
	0x1c, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x18,
	0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xc3, 0x01, 0x0a, 0x1f, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x40, 0x0a, 0x1c, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x20, 0x49, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72,
	0x44, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f,
	0x76, 0x65, 0x72, 0x44, 0x75, 0x65, 0x22, 0x2f, 0x0a, 0x14, 0x49, 0x73, 0x49, 0x6e, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x49, 0x73, 0x49, 0x6e, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x69, 0x6e,
	0x32, 0xde, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x4d, 0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x75, 0x65, 0x12, 0x22, 0x2e, 0x72,
	0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x18, 0x49, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72,
	0x44, 0x75, 0x65, 0x12, 0x2a, 0x2e, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65,
	0x72, 0x44, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54,
	0x0a, 0x0d, 0x49, 0x73, 0x49, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x1f, 0x2e, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x73, 0x49, 0x6e,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x73, 0x49,
	0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x53, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x1c, 0x2e, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_repayment_proto_rawDescOnce sync.Once
	file_proto_repayment_proto_rawDescData = file_proto_repayment_proto_rawDesc
)

func file_proto_repayment_proto_rawDescGZIP() []byte {
	file_proto_repayment_proto_rawDescOnce.Do(func() {
		file_proto_repayment_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_repayment_proto_rawDescData)
	})
	return file_proto_repayment_proto_rawDescData
}

var file_proto_repayment_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_repayment_proto_goTypes = []interface{}{
	(*SeedRecordRequest)(nil),                // 0: repayment.SeedRecordRequest
	(*SeedRecordResponse)(nil),               // 1: repayment.SeedRecordResponse
	(*BlacklistRequest)(nil),                 // 2: repayment.BlacklistRequest
	(*BlacklistResponse)(nil),                // 3: repayment.BlacklistResponse
	(*RepaymentOverDueRequest)(nil),          // 4: repayment.RepaymentOverDueRequest
	(*RepaymentOverDueResponse)(nil),         // 5: repayment.RepaymentOverDueResponse
	(*IsUserIdRepaymentOverDueRequest)(nil),  // 6: repayment.IsUserIdRepaymentOverDueRequest
	(*IsUserIdRepaymentOverDueResponse)(nil), // 7: repayment.IsUserIdRepaymentOverDueResponse
	(*IsInBlacklistRequest)(nil),             // 8: repayment.IsInBlacklistRequest
	(*IsInBlacklistResponse)(nil),            // 9: repayment.IsInBlacklistResponse
}
var file_proto_repayment_proto_depIdxs = []int32{
	2, // 0: repayment.RepaymentRecord.FetchBlacklist:input_type -> repayment.BlacklistRequest
	4, // 1: repayment.RepaymentRecord.FetchRepaymentOverDue:input_type -> repayment.RepaymentOverDueRequest
	6, // 2: repayment.RepaymentRecord.IsUserIdRepaymentOverDue:input_type -> repayment.IsUserIdRepaymentOverDueRequest
	8, // 3: repayment.RepaymentRecord.IsInBlacklist:input_type -> repayment.IsInBlacklistRequest
	0, // 4: repayment.RepaymentRecord.SeedRecord:input_type -> repayment.SeedRecordRequest
	3, // 5: repayment.RepaymentRecord.FetchBlacklist:output_type -> repayment.BlacklistResponse
	5, // 6: repayment.RepaymentRecord.FetchRepaymentOverDue:output_type -> repayment.RepaymentOverDueResponse
	7, // 7: repayment.RepaymentRecord.IsUserIdRepaymentOverDue:output_type -> repayment.IsUserIdRepaymentOverDueResponse
	9, // 8: repayment.RepaymentRecord.IsInBlacklist:output_type -> repayment.IsInBlacklistResponse
	1, // 9: repayment.RepaymentRecord.SeedRecord:output_type -> repayment.SeedRecordResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_repayment_proto_init() }
func file_proto_repayment_proto_init() {
	if File_proto_repayment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_repayment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repayment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repayment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlacklistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repayment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlacklistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repayment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepaymentOverDueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repayment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepaymentOverDueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repayment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsUserIdRepaymentOverDueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repayment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsUserIdRepaymentOverDueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repayment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsInBlacklistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repayment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsInBlacklistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_repayment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_repayment_proto_goTypes,
		DependencyIndexes: file_proto_repayment_proto_depIdxs,
		MessageInfos:      file_proto_repayment_proto_msgTypes,
	}.Build()
	File_proto_repayment_proto = out.File
	file_proto_repayment_proto_rawDesc = nil
	file_proto_repayment_proto_goTypes = nil
	file_proto_repayment_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RepaymentRecordClient is the client API for RepaymentRecord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RepaymentRecordClient interface {
	FetchBlacklist(ctx context.Context, in *BlacklistRequest, opts ...grpc.CallOption) (*BlacklistResponse, error)
	FetchRepaymentOverDue(ctx context.Context, in *RepaymentOverDueRequest, opts ...grpc.CallOption) (*RepaymentOverDueResponse, error)
	IsUserIdRepaymentOverDue(ctx context.Context, in *IsUserIdRepaymentOverDueRequest, opts ...grpc.CallOption) (*IsUserIdRepaymentOverDueResponse, error)
	IsInBlacklist(ctx context.Context, in *IsInBlacklistRequest, opts ...grpc.CallOption) (*IsInBlacklistResponse, error)
	SeedRecord(ctx context.Context, in *SeedRecordRequest, opts ...grpc.CallOption) (*SeedRecordResponse, error)
}

type repaymentRecordClient struct {
	cc grpc.ClientConnInterface
}

func NewRepaymentRecordClient(cc grpc.ClientConnInterface) RepaymentRecordClient {
	return &repaymentRecordClient{cc}
}

func (c *repaymentRecordClient) FetchBlacklist(ctx context.Context, in *BlacklistRequest, opts ...grpc.CallOption) (*BlacklistResponse, error) {
	out := new(BlacklistResponse)
	err := c.cc.Invoke(ctx, "/repayment.RepaymentRecord/FetchBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repaymentRecordClient) FetchRepaymentOverDue(ctx context.Context, in *RepaymentOverDueRequest, opts ...grpc.CallOption) (*RepaymentOverDueResponse, error) {
	out := new(RepaymentOverDueResponse)
	err := c.cc.Invoke(ctx, "/repayment.RepaymentRecord/FetchRepaymentOverDue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repaymentRecordClient) IsUserIdRepaymentOverDue(ctx context.Context, in *IsUserIdRepaymentOverDueRequest, opts ...grpc.CallOption) (*IsUserIdRepaymentOverDueResponse, error) {
	out := new(IsUserIdRepaymentOverDueResponse)
	err := c.cc.Invoke(ctx, "/repayment.RepaymentRecord/IsUserIdRepaymentOverDue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repaymentRecordClient) IsInBlacklist(ctx context.Context, in *IsInBlacklistRequest, opts ...grpc.CallOption) (*IsInBlacklistResponse, error) {
	out := new(IsInBlacklistResponse)
	err := c.cc.Invoke(ctx, "/repayment.RepaymentRecord/IsInBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repaymentRecordClient) SeedRecord(ctx context.Context, in *SeedRecordRequest, opts ...grpc.CallOption) (*SeedRecordResponse, error) {
	out := new(SeedRecordResponse)
	err := c.cc.Invoke(ctx, "/repayment.RepaymentRecord/SeedRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepaymentRecordServer is the server API for RepaymentRecord service.
type RepaymentRecordServer interface {
	FetchBlacklist(context.Context, *BlacklistRequest) (*BlacklistResponse, error)
	FetchRepaymentOverDue(context.Context, *RepaymentOverDueRequest) (*RepaymentOverDueResponse, error)
	IsUserIdRepaymentOverDue(context.Context, *IsUserIdRepaymentOverDueRequest) (*IsUserIdRepaymentOverDueResponse, error)
	IsInBlacklist(context.Context, *IsInBlacklistRequest) (*IsInBlacklistResponse, error)
	SeedRecord(context.Context, *SeedRecordRequest) (*SeedRecordResponse, error)
}

// UnimplementedRepaymentRecordServer can be embedded to have forward compatible implementations.
type UnimplementedRepaymentRecordServer struct {
}

func (*UnimplementedRepaymentRecordServer) FetchBlacklist(context.Context, *BlacklistRequest) (*BlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBlacklist not implemented")
}
func (*UnimplementedRepaymentRecordServer) FetchRepaymentOverDue(context.Context, *RepaymentOverDueRequest) (*RepaymentOverDueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRepaymentOverDue not implemented")
}
func (*UnimplementedRepaymentRecordServer) IsUserIdRepaymentOverDue(context.Context, *IsUserIdRepaymentOverDueRequest) (*IsUserIdRepaymentOverDueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserIdRepaymentOverDue not implemented")
}
func (*UnimplementedRepaymentRecordServer) IsInBlacklist(context.Context, *IsInBlacklistRequest) (*IsInBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInBlacklist not implemented")
}
func (*UnimplementedRepaymentRecordServer) SeedRecord(context.Context, *SeedRecordRequest) (*SeedRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeedRecord not implemented")
}

func RegisterRepaymentRecordServer(s *grpc.Server, srv RepaymentRecordServer) {
	s.RegisterService(&_RepaymentRecord_serviceDesc, srv)
}

func _RepaymentRecord_FetchBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepaymentRecordServer).FetchBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repayment.RepaymentRecord/FetchBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepaymentRecordServer).FetchBlacklist(ctx, req.(*BlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepaymentRecord_FetchRepaymentOverDue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepaymentOverDueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepaymentRecordServer).FetchRepaymentOverDue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repayment.RepaymentRecord/FetchRepaymentOverDue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepaymentRecordServer).FetchRepaymentOverDue(ctx, req.(*RepaymentOverDueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepaymentRecord_IsUserIdRepaymentOverDue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserIdRepaymentOverDueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepaymentRecordServer).IsUserIdRepaymentOverDue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repayment.RepaymentRecord/IsUserIdRepaymentOverDue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepaymentRecordServer).IsUserIdRepaymentOverDue(ctx, req.(*IsUserIdRepaymentOverDueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepaymentRecord_IsInBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsInBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepaymentRecordServer).IsInBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repayment.RepaymentRecord/IsInBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepaymentRecordServer).IsInBlacklist(ctx, req.(*IsInBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepaymentRecord_SeedRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeedRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepaymentRecordServer).SeedRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repayment.RepaymentRecord/SeedRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepaymentRecordServer).SeedRecord(ctx, req.(*SeedRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RepaymentRecord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "repayment.RepaymentRecord",
	HandlerType: (*RepaymentRecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchBlacklist",
			Handler:    _RepaymentRecord_FetchBlacklist_Handler,
		},
		{
			MethodName: "FetchRepaymentOverDue",
			Handler:    _RepaymentRecord_FetchRepaymentOverDue_Handler,
		},
		{
			MethodName: "IsUserIdRepaymentOverDue",
			Handler:    _RepaymentRecord_IsUserIdRepaymentOverDue_Handler,
		},
		{
			MethodName: "IsInBlacklist",
			Handler:    _RepaymentRecord_IsInBlacklist_Handler,
		},
		{
			MethodName: "SeedRecord",
			Handler:    _RepaymentRecord_SeedRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/repayment.proto",
}
